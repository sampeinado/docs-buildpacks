---
title: Binary Buildpack
---

<strong><%= modified_date %></strong>

Use the binary buildpack for running arbitrary binary web servers.

## <a id='pushing_apps'></a> Push an App ##

Specify the binary buildpack to stage an app as a binary file.
On a command line, use `cf push APP-NAME` with the `-b` option to specify the
buildpack.

For example:

<pre class="terminal">
$ cf push my_app -b https://github.com/cloudfoundry/binary-buildpack.git
</pre>

You can provide Cloud Foundry with the shell command to execute your binary in
the following two ways:

* **Procfile**: In the root directory of your app, add a `Procfile` that
specifies a `web` task:

    ```yaml
    web: ./app
    ```
* **Command line**: Use `cf push APP-NAME` with the `-c` option:

    <pre class="terminal">
    $ cf push my_app -c './app' -b binary_buildpack
    </pre>

## <a id='compiling'></a> Compile your Binary ##
Cloud Foundry expects your binary to bind to the port specified by the `PORT`
environment variable.

The following example in [Go](https://golang.org/) binds a binary to the PORT
environment variable:

```go
package main

import (
    "fmt"
    "net/http"
    "os"
)

func handler(w http.ResponseWriter, r *http.Request) {
    fmt.Fprintf(w, "Hello, %s", "world!")
}

func main() {
    http.HandleFunc("/", handler)
    http.ListenAndServe(":"+os.Getenv("PORT"), nil)
}
```

Your binary should run without any additional runtime dependencies on the
cflinuxfs3 or lucid64 root filesystem (rootfs).
Any such dependencies should be statically linked to the binary.

To boot a Docker container running the cflinuxfs3 filesystem, run the following
command:

<pre class="terminal">
$ docker run -it cloudfoundry/cflinuxfs3 bash
</pre>

To boot a Docker container running the lucid64 filesystem, run the following
command:

<pre class="terminal">
$ docker run -it cloudfoundry/lucid64 bash
</pre>

To compile the above Go application on the rootfs, golang must be installed. `apt-get install golang` and `go build app.go` will produce an `app` binary.

When deploying your binary to Cloud Foundry, use `cf push` with the `-s` option to specify the root filesystem it should run against.

<pre class="terminal">
$ cf push my_app -s (cflinuxfs3|lucid64)
</pre>

## <a id='bosh_trusted_cert'></a>BOSH Configured Custom Trusted Certificate Support ##

Your platform operator can configure the platform to add the custom certificates into the application container.
The custom trusted certificates are added to the `/etc/ssl/certs` directory and can be used by binary applications.

For more information, see [Configuring Trusted System Certificates for Applications](https://docs.cloudfoundry.org/running/trusted-system-certificates.html).

## <a id='dotnet-console'></a>.NET Apps
**.NET Core on Windows**
To run .NET Core apps on the Windows stack, you must use the Binary buildpack. Follow these steps to set up your CF manifest appropriately. 

1.In your app’s manifest file, specify the windows stack and a custom start command. This file should be in the same folder as your .csproj file and be marked “copy always.”  
```
---
applications:
- name: myapp
  stack: windows
  command: cmd /c .\myapp --server.urls=http://0.0.0.0:%PORT%
```


2.Publish the project using the dotnet CLI or Visual Studio.
<pre class="terminal">
$ dotnet publish -o ./publish -r win10-x64 -f netcoreapp2.1
</pre>

3.There should now be a “publish” folder. `cd` into that folder, verify the manifest.yml file is there, and then `cf push`:
<pre class="terminal">
$ cd publish
$cf push myapp
</pre>

**.NET Framework**
To run a self hosted application using OWIN, compile the app to myapp.exe and use the Binary buildpack. Here is a sample CF manifest for that: 

```
applications:
- name: myapp
  stack: windows
  command: cmd /c .\myapp --server.urls=http://0.0.0.0:%PORT%
```

**Console Apps**
Console apps are not recommended to run on Cloud Foundry because they will normally run as a single instance and therefore will not be highly available. If you need to run a console app on Cloud Foundry, you can find more information on how to do so [here](https://dotnet-cookbook.cfapps.io/headless/console_app/).

For information about deploying different types of .NET apps, follow the links in the table below.

<table>
  <tr>
    <th>Type of .NET App</th>
    <th>Buildpack</th>
  </tr>
  <tr>
    <td>
        ASP.NET MVC<br>
        ASP.NET Web Forms<br>
        ASP.NET WebAPI Apps<br>
        Windows Communication Foundation (WCF)
    </td>
    <td><a href="../hwc/index.html">HWC</a></td>
  </tr>
  <tr>
    <td>.NET Core pushed to Linux stack</td>
    <td><a href="../dotnet-core/index.html">.NET Core</a></td>
  </tr>
</table>

## <a id='help_support'></a>Help and Support ##

Join the #buildpacks channel in our [Slack community](http://slack.cloudfoundry.org/) if you need any further assistance.

For more information about using and extending the binary buildpack in Cloud
Foundry, see the [binary-buildpack GitHub repository](https://github.com/cloudfoundry/binary-buildpack).

You can find current information about this buildpack on the binary buildpack
[release page](https://github.com/cloudfoundry/binary-buildpack/releases) in
GitHub.
